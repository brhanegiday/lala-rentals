generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole   @default(RENTER)
  accounts       Account[]
  sessions       Session[]
  listings       Property[] @relation("HostProperties")
  bookings       Booking[]  @relation("RenterBookings")
  hostedBookings Booking[]  @relation("HostBookings")
}

enum UserRole {
  RENTER
  HOST
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id           String    @id @default(cuid())
  title        String
  description  String
  price        Float
  location     String
  hostId       String
  host         User      @relation("HostProperties", fields: [hostId], references: [id])
  images       String[]
  amenities    String[]
  propertyType String    @default("house")
  instantBook  Boolean   @default(true)
  rating       Float?    @default(4.5)
  reviews      Int       @default(0)
  bookings     Booking[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([hostId])
}

model Booking {
  id         String        @id @default(cuid())
  propertyId String
  renterId   String
  hostId     String
  checkIn    DateTime
  checkOut   DateTime
  status     BookingStatus @default(PENDING)
  totalPrice Float
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  property Property @relation(fields: [propertyId], references: [id])
  renter   User     @relation("RenterBookings", fields: [renterId], references: [id])
  host     User     @relation("HostBookings", fields: [hostId], references: [id])

  @@index([propertyId])
  @@index([renterId])
  @@index([hostId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}
